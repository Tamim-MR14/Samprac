#include<iostream>
using namespace std;

int edges[200][200], parent[200], visited[200], level[200], cnt[200], N, E, color0 = 0, color1 = 0,T;


class queue {
	int head, tail, cap;
	char arr[100];
public:
	queue(int capacity) {
		head = -1;
		tail = -1;
		cap = capacity;
	}

	void enqueue(int x) {
		if (tail == -1) {
			tail = 0;
			head = 0;
			arr[tail] = x;

		}
		else if (head == (tail + 1) % cap) {
			cout << "The queue is full.";
		}
		else {
			tail = (tail + 1) % cap;
			arr[tail] = x;
		}
	}

	int dequeue() {
		if (head == -1) {
			throw "The queue is empty";

		}
		else if (head == tail) {
			tail--;
			int x = arr[head];
			head--;
			return  x;
		}
		else {
			int x = arr[head];
			head = (head + 1) % cap;
			return x;
		}
	}

	bool is_empty() {
		if (head == -1) {
			return true;
		}
		else {
			return false;
		}
	}
};

bool bfs(int n, queue a) {
	a.enqueue(n);
	level[n-1] = 0;
	color0++;
	while (!a.is_empty()) {
		int b = a.dequeue();
		for (int i = 0; i < cnt[b-1]; i++) {
			if (level[edges[b-1][i]-1] == -1) {
				level[edges[b-1][i]-1] = level[b-1] + 1;
				if (level[edges[b-1][i]-1] % 2 == 0) {
					color0++;
				}
				else {
					color1++;
				}
				parent[edges[b-1][i]-1] = b;
				a.enqueue(edges[b-1][i]);
			}
			else {
				if (level[edges[b-1][i]-1] % 2 != (level[b-1] + 1) % 2) {
					return false;
				}
			}

		}
	}
	return true;
}




int main() {
	/*queue a(3);
	//cout << a.dequeue() << endl;
	a.enqueue(5);

	try {
	cout << a.dequeue() << endl;
	int b = a.dequeue();
	cout << b << endl;
	cout << a.is_empty();
	cout << a.dequeue() << endl;
	}catch (const char* msg) {
	cerr << msg << endl;
	}*/

	cin >> T;
	/*while (1) {
		char c1 = cin.get();
		char c2 = cin.peek();
		if (c2 == '\n')break;
	}*/
	getchar();
	for (int t = 0; t < T; t++) {
		cin >> N;
		for (int i = 0; i < N; i++) {
			cnt[i] = 0;
			level[i] = -1;
			for (int j = 0; j < N; j++) {
				edges[i][j] = 0;
			}
		}
		int b;
		for (int a = 1; a <=N; a++) {
			int f;
			cin >> f;
			if (f == '0') {
				a++;
				continue;
			}
			/*char c1 = cin.get();
			char c2 = cin.peek();
			if (c2 == '\n')break;*/
			cnt[a-1] = f;
			for (int i = 0; i < cnt[a-1]; i++) {
				cin >> b;
				edges[a-1][i] = b;
				edges[b - 1][cnt[b - 1]] = a;
				cnt[b - 1]++;
			}
		}
		getchar();
		for (int x = 0; x < N; x++) {
			for (int y = 0; y < N; y++) {
				cout << edges[x][y] << " ";
			}
			cout << endl;
		}
		queue c(100);
		color0 = 0;
		color1 = 0;
		if (bfs(1, c)) {
			if (color0 > color1) {
				cout << color0 << "color0";
			}
			else {
				cout << color1+1 << "color1";
			}
		}
		else {
			cout << "not";
		}
		cout << endl;
	}
	
	system("pause");
	return 0;
}